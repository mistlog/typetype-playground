/**
 * ref:
 * - https://github.com/type-challenges/type-challenges/blob/master/questions/296-medium-permutation/README.md
 * - https://github.com/type-challenges/type-challenges/issues/614
 * - https://github.com/type-challenges/type-challenges/issues/548
 */

/**
 * eg.
 * 
 * 
    checks([
        check<Permutation<never>, [], Test.Pass>(),
        check<Permutation<'A'>, ['A'], Test.Pass>(),
        check<Permutation<'A' | 'B' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A'], Test.Pass>(),
        check<Permutation<'B' | 'A' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A'], Test.Pass>(),
    ])
 */

export type function Permutation = (Union, UnionCopy = Union) => ^{
    if(IsNever<Union> extends true) {
        return []
    } else if(UnionCopy extends infer Item){
        return PermuteItem<Union, Item>
    } else {
        return never
    }
}

type function IsNever = (T) => ^{
    if([T] extends [never]) {
        return true
    } else {
        return false
    }
}

type function PermuteItem = (Union, Item, Rest = Exclude<Union, Item>) => ^{
    if(IsNever<Rest> extends true) {
        return [Item]
    } else {
        return [Item, ...Permutation<Rest>]
    }
}
